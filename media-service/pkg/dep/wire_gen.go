// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dep

import (
	"context"
	zipkin2 "contrib.go.opencensus.io/exporter/zipkin"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/alexandria-oss/core/tracer"
	"github.com/alexandria-oss/core/transport"
	"github.com/alexandria-oss/core/transport/proxy"
	"github.com/go-kit/kit/log"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/media-service/internal/dependency"
	"github.com/maestre3d/alexandria/media-service/pkg/media"
	"github.com/maestre3d/alexandria/media-service/pkg/media/usecase"
	"github.com/maestre3d/alexandria/media-service/pkg/transport/bind"
	"github.com/openzipkin/zipkin-go"
	"github.com/openzipkin/zipkin-go/model"
	"github.com/openzipkin/zipkin-go/reporter"
	"github.com/openzipkin/zipkin-go/reporter/http"
	"go.opencensus.io/trace"
)

// Injectors from wire.go:

func InjectTransportService() (*transport.Transport, func(), error) {
	context := provideContext()
	logLogger := logger.NewZapLogger()
	mediaInteractor, cleanup, err := provideMediaInteractor(context, logLogger)
	if err != nil {
		return nil, nil, err
	}
	kernel, err := config.NewKernel(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	reporter := provideZipkinReporter(kernel)
	endpoint := provideZipkinEndpoint(kernel)
	zipkinTracer, cleanup2 := provideZipkinTracer(reporter, endpoint)
	opentracingTracer := tracer.WrapZipkinOpenTracing(kernel, zipkinTracer)
	mediaRPCServer := bind.NewMediaRPC(mediaInteractor, logLogger, opentracingTracer, zipkinTracer)
	healthRPCServer := bind.NewHealthRPC()
	v := provideRPCServers(mediaRPCServer, healthRPCServer)
	server, cleanup3 := proxy.NewRPC(v)
	mediaHandler := bind.NewMediaHTTP(mediaInteractor, logLogger, opentracingTracer, zipkinTracer)
	v2 := provideHTTPHandlers(mediaHandler)
	http, cleanup4 := proxy.NewHTTP(kernel, v2...)
	mediaSAGAInteractor, cleanup5, err := provideMediaSAGAInteractor(context, logLogger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mediaEventConsumer := bind.NewMediaEventConsumer(mediaSAGAInteractor, logLogger, kernel)
	v3 := provideEventConsumers(mediaEventConsumer)
	event, cleanup6, err := proxy.NewEvent(context, kernel, v3...)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	transportTransport := transport.NewTransport(server, http, event, kernel)
	return transportTransport, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var Ctx = context.Background()

var interactorSet = wire.NewSet(
	provideContext, logger.NewZapLogger, provideMediaInteractor,
)

var zipkinSet = wire.NewSet(
	provideZipkinReporter,
	provideZipkinEndpoint,
	provideZipkinTracer,
)

var httpProxySet = wire.NewSet(
	interactorSet, config.NewKernel, zipkinSet, tracer.WrapZipkinOpenTracing, bind.NewMediaHTTP, provideHTTPHandlers, proxy.NewHTTP,
)

var rpcProxySet = wire.NewSet(bind.NewMediaRPC, bind.NewHealthRPC, provideRPCServers, proxy.NewRPC)

var eventProxySet = wire.NewSet(
	provideMediaSAGAInteractor, bind.NewMediaEventConsumer, provideEventConsumers, proxy.NewEvent,
)

func provideContext() context.Context {
	return Ctx
}

func provideMediaInteractor(ctx context.Context, logger2 log.Logger) (usecase.MediaInteractor, func(), error) {
	dependency.Ctx = ctx

	mediaInteractor, cleanup, err := dependency.InjectMediaUseCase()
	mediaService := media.WrapMediaInstrumentation(mediaInteractor, logger2)

	return mediaService, cleanup, err
}

func provideMediaSAGAInteractor(ctx context.Context, logger2 log.Logger) (usecase.MediaSAGAInteractor, func(), error) {
	dependency.Ctx = ctx

	mediaInteractor, cleanup, err := dependency.InjectMediaSAGAUseCase()
	mediaService := media.WrapMediaSAGAInstrumentation(mediaInteractor, logger2)

	return mediaService, cleanup, err
}

// Bind/Map used http handlers
func provideHTTPHandlers(mediaHandler *bind.MediaHandler) []proxy.Handler {
	handlers := make([]proxy.Handler, 0)
	handlers = append(handlers, mediaHandler)
	return handlers
}

// Bind/Map used rpc servers
func provideRPCServers(mediaServer *bind.MediaRPCServer, healthServer *bind.HealthRPCServer) []proxy.RPCServer {
	servers := make([]proxy.RPCServer, 0)
	servers = append(servers, mediaServer, healthServer)
	return servers
}

// Bind/Map used event consumers
func provideEventConsumers(mediaConsumer *bind.MediaEventConsumer) []proxy.Consumer {
	consumers := make([]proxy.Consumer, 0)
	consumers = append(consumers, mediaConsumer)
	return consumers
}

// NewZipkin returns a zipkin tracing consumer
func provideZipkinReporter(cfg *config.Kernel) reporter.Reporter {
	if cfg.Tracing.ZipkinHost != "" {
		zipkinReporter := http.NewReporter(cfg.Tracing.ZipkinHost)

		return zipkinReporter
	}

	return nil
}

// NewZipkin returns a zipkin tracing consumer
func provideZipkinEndpoint(cfg *config.Kernel) *model.Endpoint {
	if cfg.Tracing.ZipkinEndpoint != "" {
		zipkinEndpoint, err := zipkin.NewEndpoint(cfg.Service, cfg.Tracing.ZipkinEndpoint)
		if err != nil {
			return nil
		}

		return zipkinEndpoint
	}

	return nil
}

// NewZipkin returns a zipkin tracing consumer
func provideZipkinTracer(r reporter.Reporter, ep *model.Endpoint) (*zipkin.Tracer, func()) {
	if r != nil && ep != nil {
		trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})
		trace.RegisterExporter(zipkin2.NewExporter(r, ep))

		zipkinTrace, err := zipkin.NewTracer(r, zipkin.WithLocalEndpoint(ep))
		if err != nil {
			return nil, nil
		}
		cleanup := func() {
			_ = r.Close()
		}

		return zipkinTrace, cleanup
	}

	return nil, nil
}
