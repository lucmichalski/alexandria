// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/media-service/internal/media/application"
	"github.com/maestre3d/alexandria/media-service/internal/media/domain"
	"github.com/maestre3d/alexandria/media-service/internal/media/infrastructure"
	"github.com/maestre3d/alexandria/media-service/internal/shared/domain/util"
	"github.com/maestre3d/alexandria/media-service/internal/shared/infrastructure/config"
	"github.com/maestre3d/alexandria/media-service/internal/shared/infrastructure/logging"
	"github.com/maestre3d/alexandria/media-service/internal/shared/infrastructure/persistence"
	"github.com/maestre3d/alexandria/media-service/pkg/service/delivery"
	"github.com/maestre3d/alexandria/media-service/pkg/service/delivery/handler"
)

// Injectors from wire.go:

func InitHTTPServiceProxy() (*delivery.HTTPServiceProxy, func(), error) {
	logger, cleanup, err := logging.NewLogger()
	if err != nil {
		return nil, nil, err
	}
	context := ProvideContext()
	kernelConfig := config.NewKernelConfig(context, logger)
	server := delivery.NewHTTPServer(logger, kernelConfig)
	db, cleanup2, err := persistence.NewPostgresPool(context, logger, kernelConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, cleanup3, err := persistence.NewRedisPool(logger, kernelConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mediaRDBMSRepository := infrastructure.NewMediaRDBMSRepository(db, client, logger, context)
	mediaUseCase := application.NewMediaUseCase(logger, mediaRDBMSRepository)
	mediaHandler := handler.NewMediaHandler(logger, mediaUseCase)
	proxyHandlers := ProvideProxyHandlers(mediaHandler)
	httpServiceProxy := delivery.NewHTTPServiceProxy(logger, server, proxyHandlers)
	return httpServiceProxy, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var loggerSet = wire.NewSet(logging.NewLogger, wire.Bind(new(util.ILogger), new(*logging.Logger)))

var configSet = wire.NewSet(
	ProvideContext,
	loggerSet, config.NewKernelConfig,
)

var postgresPoolSet = wire.NewSet(
	configSet, persistence.NewPostgresPool,
)

var redisPoolSet = wire.NewSet(persistence.NewRedisPool)

var mediaRepositorySet = wire.NewSet(
	postgresPoolSet,
	redisPoolSet, infrastructure.NewMediaRDBMSRepository, wire.Bind(new(domain.IMediaRepository), new(*infrastructure.MediaRDBMSRepository)),
)

var mediaUseCaseSet = wire.NewSet(
	mediaRepositorySet, application.NewMediaUseCase,
)

var mediaHandlerSet = wire.NewSet(
	mediaUseCaseSet, handler.NewMediaHandler,
)

var proxyHandlersSet = wire.NewSet(
	mediaHandlerSet,
	ProvideProxyHandlers,
)

func ProvideContext() context.Context {
	return context.Background()
}

func ProvideMediaLocalRepository(logger util.ILogger) *infrastructure.MediaLocalRepository {
	return infrastructure.NewMediaLocalRepository(make([]*domain.MediaAggregate, 0), logger)
}

func ProvideProxyHandlers(media *handler.MediaHandler) *delivery.ProxyHandlers {

	return &delivery.ProxyHandlers{
		media,
	}
}
