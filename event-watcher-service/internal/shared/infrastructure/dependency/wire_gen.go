// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/alexandria-oss/core/persistence"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/domain"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/infrastructure"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/interactor"
)

// Injectors from wire.go:

func InjectWatcherUseCase() (*interactor.WatcherUseCase, func(), error) {
	context := provideContext()
	logLogger := logger.NewZapLogger()
	kernelConfiguration, err := config.NewKernelConfiguration(context)
	if err != nil {
		return nil, nil, err
	}
	collection, cleanup, err := persistence.NewDynamoDBCollectionPool(context, kernelConfiguration)
	if err != nil {
		return nil, nil, err
	}
	watcherDynamoRepository := infrastructure.NewWatcherDynamoRepository(context, logLogger, collection)
	watcherUseCase := interactor.NewWatcherUseCase(context, logLogger, watcherDynamoRepository)
	return watcherUseCase, func() {
		cleanup()
	}, nil
}

// wire.go:

var configSet = wire.NewSet(
	provideContext, logger.NewZapLogger, config.NewKernelConfiguration,
)

var watcherDynamoRepositorySet = wire.NewSet(
	configSet, persistence.NewDynamoDBCollectionPool, wire.Bind(new(domain.WatcherRepository), new(*infrastructure.WatcherDynamoRepository)), infrastructure.NewWatcherDynamoRepository,
)

var watcherUseCaseSet = wire.NewSet(
	watcherDynamoRepositorySet, interactor.NewWatcherUseCase,
)

func provideContext() context.Context {
	return context.Background()
}
