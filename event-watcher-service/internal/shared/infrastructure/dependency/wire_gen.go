// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/go-kit/kit/log"
	zap2 "github.com/go-kit/kit/log/zap"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/shared/infrastructure/config"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/domain"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/infrastructure"
	"github.com/maestre3d/alexandria/event-watcher-service/internal/watcher/interactor"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Injectors from wire.go:

func InjectWatcherUseCase() (*interactor.WatcherUseCase, func(), error) {
	context := provideContext()
	logger := provideZapLogger()
	kernelConfig := config.NewKernelConfig(context, logger)
	watcherDynamoRepository, cleanup, err := infrastructure.NewWatcherDynamoRepository(context, logger, kernelConfig)
	if err != nil {
		return nil, nil, err
	}
	watcherUseCase := interactor.NewWatcherUseCase(context, logger, watcherDynamoRepository)
	return watcherUseCase, func() {
		cleanup()
	}, nil
}

// wire.go:

var configSet = wire.NewSet(
	provideContext,
	provideZapLogger, config.NewKernelConfig,
)

var watcherDynamoRepositorySet = wire.NewSet(
	configSet, wire.Bind(new(domain.WatcherRepository), new(*infrastructure.WatcherDynamoRepository)), infrastructure.NewWatcherDynamoRepository,
)

var watcherUseCaseSet = wire.NewSet(
	watcherDynamoRepositorySet, interactor.NewWatcherUseCase,
)

func provideContext() context.Context {
	return context.Background()
}

func provideZapLogger() log.Logger {
	loggerZap, _ := zap.NewProduction()
	defer loggerZap.Sync()
	level := zapcore.Level(8)

	return zap2.NewZapSugarLogger(loggerZap, level)
}
