// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"database/sql"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/alexandria-oss/core/persistence"
	"github.com/go-kit/kit/log"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/identity-service/internal/domain"
	"github.com/maestre3d/alexandria/identity-service/internal/infrastructure"
	"github.com/maestre3d/alexandria/identity-service/internal/interactor"
)

// Injectors from wire.go:

func InjectUserUseCase() (*interactor.UserUseCase, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := persistence.NewPostgresPool(context, kernel)
	if err != nil {
		return nil, nil, err
	}
	domainUserRepository, cleanup2 := provideUserPostgresRepository(context, logLogger, db, kernel)
	interactorUserUseCase := interactor.NewUserUseCase(logLogger, domainUserRepository)
	return interactorUserUseCase, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectIdentityUseCase() (*interactor.IdentityUseCase, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	identityCognitoAdapter := infrastructure.NewProviderCognitoAdapter(logLogger, kernel)
	identityUseCase := interactor.NewIdentityUseCase(logLogger, identityCognitoAdapter)
	return identityUseCase, func() {
	}, nil
}

// wire.go:

var cfgSet = wire.NewSet(
	provideContext, config.NewKernel,
)

var logSet = wire.NewSet(logger.NewZapLogger)

var persistenceSet = wire.NewSet(
	cfgSet, persistence.NewPostgresPool,
)

var userRepository = wire.NewSet(
	persistenceSet,
	logSet,
	provideUserPostgresRepository,
)

var userUseCase = wire.NewSet(
	userRepository, interactor.NewUserUseCase,
)

func provideContext() context.Context {
	return context.Background()
}

func provideUserPostgresRepository(ctx context.Context, logger2 log.Logger, db *sql.DB, cfg *config.Kernel) (domain.UserRepository, func()) {
	repo := infrastructure.NewUserPostgresRepository(logger2, db)
	mem, cleanup, _ := persistence.NewRedisPool(cfg)

	repo.SetInMem(mem)

	return repo, cleanup
}
