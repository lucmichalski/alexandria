// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/blob-service/internal/domain"
	"github.com/maestre3d/alexandria/blob-service/internal/infrastructure"
	"github.com/maestre3d/alexandria/blob-service/internal/interactor"
)

// Injectors from wire.go:

func InjectBlobUseCase() (*interactor.Blob, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	blobDynamoRepository := infrastructure.NewBlobDynamoRepository(logLogger, kernel)
	blobS3Storage := infrastructure.NewBlobS3Storage(logLogger)
	blobKafkaEvent := infrastructure.NewBlobKafkaEvent(kernel)
	blob := interactor.NewBlob(logLogger, blobDynamoRepository, blobS3Storage, blobKafkaEvent)
	return blob, func() {
	}, nil
}

func InjectBlobSagaUseCase() (*interactor.BlobSAGA, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	blobDynamoRepository := infrastructure.NewBlobDynamoRepository(logLogger, kernel)
	blobS3Storage := infrastructure.NewBlobS3Storage(logLogger)
	blobSAGA := interactor.NewBlobSaga(logLogger, blobDynamoRepository, blobS3Storage)
	return blobSAGA, func() {
	}, nil
}

// wire.go:

var Ctx = context.Background()

var persistenceSet = wire.NewSet(logger.NewZapLogger, wire.Bind(new(domain.BlobStorage), new(*infrastructure.BlobS3Storage)), infrastructure.NewBlobS3Storage, provideContext, config.NewKernel, wire.Bind(new(domain.BlobRepository), new(*infrastructure.BlobDynamoRepository)), infrastructure.NewBlobDynamoRepository)

func provideContext() context.Context {
	return Ctx
}
