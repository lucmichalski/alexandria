// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/alexandria-oss/core/persistence"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/author-service/internal/domain"
	"github.com/maestre3d/alexandria/author-service/internal/infrastructure"
	"github.com/maestre3d/alexandria/author-service/internal/interactor"
)

// Injectors from wire.go:

func InjectAuthorUseCase() (*interactor.Author, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := persistence.NewPostgresPool(context, kernel)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := persistence.NewRedisPool(kernel)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authorPQRepository := infrastructure.NewAuthorPQRepository(db, client, logLogger)
	authorKafkaEventBus := infrastructure.NewAuthorKafkaEventBus(kernel)
	author := interactor.NewAuthor(logLogger, authorPQRepository, authorKafkaEventBus)
	return author, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectAuthorSAGAUseCase() (*interactor.AuthorSAGA, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := persistence.NewPostgresPool(context, kernel)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := persistence.NewRedisPool(kernel)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authorPQRepository := infrastructure.NewAuthorPQRepository(db, client, logLogger)
	authorSAGAKafkaEventBus := infrastructure.NewAuthorSAGAKafkaEventBus(kernel)
	authorKafkaEventBus := infrastructure.NewAuthorKafkaEventBus(kernel)
	authorSAGA := interactor.NewAuthorSAGA(logLogger, authorPQRepository, authorSAGAKafkaEventBus, authorKafkaEventBus)
	return authorSAGA, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var Ctx context.Context = context.Background()

var dataSet = wire.NewSet(
	provideContext, config.NewKernel, persistence.NewPostgresPool, persistence.NewRedisPool, logger.NewZapLogger, wire.Bind(new(domain.AuthorRepository), new(*infrastructure.AuthorPQRepository)), infrastructure.NewAuthorPQRepository,
)

var eventSet = wire.NewSet(wire.Bind(new(domain.AuthorEventBus), new(*infrastructure.AuthorKafkaEventBus)), infrastructure.NewAuthorKafkaEventBus)

func provideContext() context.Context {
	return Ctx
}
