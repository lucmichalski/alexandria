// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/go-kit/kit/log"
	zap2 "github.com/go-kit/kit/log/zap"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/author-service/internal/author/domain"
	"github.com/maestre3d/alexandria/author-service/internal/author/infrastructure"
	"github.com/maestre3d/alexandria/author-service/internal/author/interactor"
	"github.com/maestre3d/alexandria/author-service/internal/shared/infrastructure/config"
	"github.com/maestre3d/alexandria/author-service/internal/shared/infrastructure/persistence"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Injectors from wire.go:

func InjectAuthorUseCase() (*interactor.AuthorUseCase, func(), error) {
	logger := ProvideLogger()
	context := ProvideContext()
	kernelConfig := config.NewKernelConfig(context, logger)
	db, cleanup, err := persistence.NewPostgresPool(context, logger, kernelConfig)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := persistence.NewRedisPool(logger, kernelConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authorDBMSRepository := infrastructure.NewAuthorDBMSRepository(db, client, context, logger)
	authorUseCase := interactor.NewAuthorUseCase(logger, authorDBMSRepository)
	return authorUseCase, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var configSet = wire.NewSet(
	ProvideContext,
	ProvideLogger, config.NewKernelConfig,
)

var DBMSPoolSet = wire.NewSet(
	configSet, persistence.NewPostgresPool,
)

var AuthorDBMSRepositorySet = wire.NewSet(
	DBMSPoolSet, persistence.NewRedisPool, wire.Bind(new(domain.IAuthorRepository), new(*infrastructure.AuthorDBMSRepository)), infrastructure.NewAuthorDBMSRepository,
)

var AuthorServiceSet = wire.NewSet(
	AuthorDBMSRepositorySet, interactor.NewAuthorUseCase,
)

func ProvideContext() context.Context {
	return context.Background()
}

func ProvideLogger() log.Logger {
	loggerZap, _ := zap.NewProduction()
	defer loggerZap.Sync()
	level := zapcore.Level(8)

	return zap2.NewZapSugarLogger(loggerZap, level)
}
