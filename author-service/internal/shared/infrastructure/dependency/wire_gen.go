// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/author-service/internal/author/domain"
	"github.com/maestre3d/alexandria/author-service/internal/author/infrastructure"
	"github.com/maestre3d/alexandria/author-service/internal/author/interactor"
	"github.com/maestre3d/alexandria/author-service/internal/shared/domain/util"
	"github.com/maestre3d/alexandria/author-service/internal/shared/infrastructure/logging"
	"github.com/maestre3d/alexandria/author-service/internal/shared/infrastructure/persistence"
)

// Injectors from wire.go:

func InjectAuthorService() (*interactor.AuthorService, func(), error) {
	zapLogger, cleanup, err := logging.NewZapLogger()
	if err != nil {
		return nil, nil, err
	}
	context := ProvideContext()
	db, cleanup2, err := persistence.NewPostgresPool(context, zapLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authorDBMSRepository := infrastructure.NewAuthorDBMSRepository(db, context, zapLogger)
	authorService := interactor.NewAuthorService(zapLogger, authorDBMSRepository)
	return authorService, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var LoggerSet = wire.NewSet(wire.Bind(new(util.ILogger), new(*logging.ZapLogger)), logging.NewZapLogger)

var DBMSPoolSet = wire.NewSet(
	ProvideContext,
	LoggerSet, persistence.NewPostgresPool,
)

var AuthorDBMSRepositorySet = wire.NewSet(
	DBMSPoolSet, wire.Bind(new(domain.IAuthorRepository), new(*infrastructure.AuthorDBMSRepository)), infrastructure.NewAuthorDBMSRepository,
)

var AuthorServiceSet = wire.NewSet(
	AuthorDBMSRepositorySet, interactor.NewAuthorService,
)

func ProvideContext() context.Context {
	return context.Background()
}
