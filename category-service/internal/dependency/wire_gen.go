// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/alexandria-oss/core/config"
	"github.com/alexandria-oss/core/logger"
	"github.com/alexandria-oss/core/persistence"
	"github.com/google/wire"
	"github.com/maestre3d/alexandria/category-service/internal/domain"
	"github.com/maestre3d/alexandria/category-service/internal/infrastructure"
	"github.com/maestre3d/alexandria/category-service/internal/interactor"
)

// Injectors from wire.go:

func InjectCategoryUseCase() (*interactor.CategoryUseCase, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	clusterConfig := infrastructure.NewCassandraPool(kernel)
	client, cleanup, err := persistence.NewRedisPool(kernel)
	if err != nil {
		return nil, nil, err
	}
	categoryRepositoryCassandra := infrastructure.NewCategoryRepositoryCassandra(clusterConfig, client)
	categoryEventKafka := infrastructure.NewCategoryEventKafka(kernel)
	categoryUseCase := interactor.NewCategoryUseCase(logLogger, categoryRepositoryCassandra, categoryEventKafka)
	return categoryUseCase, func() {
		cleanup()
	}, nil
}

func InjectCategoryRootUseCase() (*interactor.CategoryRootUseCase, func(), error) {
	logLogger := logger.NewZapLogger()
	context := provideContext()
	kernel, err := config.NewKernel(context)
	if err != nil {
		return nil, nil, err
	}
	clusterConfig := infrastructure.NewCassandraPool(kernel)
	categoryRootCassandraRepository := infrastructure.NewCategoryRootCassandraRepository(clusterConfig)
	client, cleanup, err := persistence.NewRedisPool(kernel)
	if err != nil {
		return nil, nil, err
	}
	categoryRepositoryCassandra := infrastructure.NewCategoryRepositoryCassandra(clusterConfig, client)
	categoryRootUseCase := interactor.NewCategoryRootUseCase(logLogger, categoryRootCassandraRepository, categoryRepositoryCassandra)
	return categoryRootUseCase, func() {
		cleanup()
	}, nil
}

// wire.go:

var ctx = context.Background()

var dataSet = wire.NewSet(
	provideContext, config.NewKernel, persistence.NewRedisPool, infrastructure.NewCassandraPool, wire.Bind(new(domain.CategoryRepository), new(*infrastructure.CategoryRepositoryCassandra)), infrastructure.NewCategoryRepositoryCassandra,
)

func SetContext(ctxRoot context.Context) {
	ctx = ctxRoot
}

func provideContext() context.Context {
	return ctx
}
